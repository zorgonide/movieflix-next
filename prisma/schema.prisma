// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id        String      @id
  email     String      @unique
  firstName String?
  lastName  String?
  createdAt DateTime    @default(now())
  role      String      @default("USER")
  genres    String      @default("[]")
  WatchList WatchList[]
  Comment   Comment[]
  Rating    Rating[]
}

model Movie {
  id          Int         @id
  title       String
  year        String?
  description String
  imdbRating  Float?
  createdAt   DateTime    @default(now())
  poster      String
  background  String
  WatchList   WatchList[]
  Comment     Comment[]
  Rating      Rating[]
}

model WatchList {
  userId    String
  movieId   Int
  createdAt DateTime @default(now())
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, movieId])
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  createdAt DateTime @default(now())
  movieId   Int
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([id, userId])
}

model Rating {
  id         String @id @default(uuid())
  userRating Float
  userId     String
  movieId    Int
  movie      Movie  @relation(fields: [movieId], references: [id])
  user       User   @relation(fields: [userId], references: [id])

  @@unique([userId, movieId])
}